---
title: "Assignment 4"
---

## Question 1

**A strong entity set** is one that can be uniquely identified by its own attributes and has a primary key. In contrast, a **weak entity set** cannot be uniquely identified by its own attributes alone and relies on a related strong entity set for identification. It typically includes a partial key and participates in a relationship—often with total participation—through which it derives its full identity.

For instance, a dataset for library contains attributes like Library_ID and Name. This is a strong entity set. But Books including the copies of ach book, like Copy_No and Library_ID may be a weak entity set that only exists in relation with the Library table.

## Question 2

An NFL database is designed to store and manage comprehensive information about teams, players, games, and performance statistics. At its core, the database includes a Team table containing each NFL team's name, city, stadium, division, and conference. The Player table holds details about individual athletes, including their name, position, physical stats, college background, and the team they play for. Games are recorded in a Game table, which tracks the date, season, week, home and away teams, and final results. To analyze performance, a Player_Stats table logs key statistics such as passing yards, touchdowns, and interceptions for each player per game. Additionally, a Coach table captures information about coaching staff and their roles, while a Season_Standings table monitors team records across seasons. This relational structure allows for detailed queries about game outcomes, player performance, and seasonal rankings, supporting both real-time updates and historical analysis.

## Question 3

Appending a natural join with the section table in the FROM clause of the given query would not change the result because the query already groups by course_id, semester, year, and sec_id—attributes that are present in both the takes and section tables. In a natural join, the join is performed automatically based on common attribute names, and since these attributes are already available through the takes relation, adding the section table does not contribute any new information or change the grouping or filtering logic. Therefore, the aggregation of avg(tot_cred) and the having count(ID) \>= 2 condition will still be evaluated on the same set of tuples, making the additional join with section redundant in this context.
